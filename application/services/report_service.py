# New_Architecture/application/services/report_service.py
"""Report Service f端r umfassende Berichte"""

import logging
from typing import Dict, Any, Optional, List
from pathlib import Path
from datetime import datetime

logger = logging.getLogger(__name__)


class ReportService:
    """Service f端r Report-Generierung"""
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
    
    def create_html_report(
        self,
        data: Dict[str, Any],
        output_path: Path,
        include_plots: bool = True
    ) -> None:
        """Erstellt umfassenden HTML-Report"""
        html = self._generate_html_template(data, include_plots)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html)
        
        logger.info(f"Created HTML report: {output_path}")
    
    def _generate_html_template(self, data: Dict, include_plots: bool) -> str:
        """Generiert HTML-Template f端r Report"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        html = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>M3C2 Analysis Report - {data.get('project', 'Unknown')}</title>
            <style>
                {self._get_css_styles()}
            </style>
        </head>
        <body>
            <div class="container">
                <header>
                    <h1>M3C2 Point Cloud Analysis Report</h1>
                    <div class="metadata">
                        <p><strong>Project:</strong> {data.get('project', 'N/A')}</p>
                        <p><strong>Generated:</strong> {timestamp}</p>
                        <p><strong>Cloud Pair:</strong> {data.get('cloud_pair', 'N/A')}</p>
                    </div>
                </header>
                
                <nav>
                    <ul>
                        <li><a href="#parameters">Parameters</a></li>
                        <li><a href="#statistics">Statistics</a></li>
                        <li><a href="#visualizations">Visualizations</a></li>
                        <li><a href="#errors">Errors & Warnings</a></li>
                    </ul>
                </nav>
                
                <main>
                    {self._generate_parameters_section(data)}
                    {self._generate_statistics_section(data)}
                    {self._generate_visualizations_section(data) if include_plots else ''}
                    {self._generate_errors_section(data)}
                </main>
                
                <footer>
                    <p>Generated by M3C2 Pipeline v2.0</p>
                </footer>
            </div>
        </body>
        </html>
        """
        
        return html
    
    def _get_css_styles(self) -> str:
        """Gibt CSS-Styles zur端ck"""
        return """
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
                line-height: 1.6;
                color: #333;
                background: #f5f5f5;
            }
            .container { max-width: 1200px; margin: 0 auto; background: white; }
            header { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 2rem;
            }
            h1 { margin-bottom: 1rem; }
            .metadata { 
                background: rgba(255,255,255,0.1);
                padding: 1rem;
                border-radius: 5px;
            }
            nav { 
                background: #2c3e50;
                padding: 0;
            }
            nav ul { 
                list-style: none;
                display: flex;
            }
            nav a { 
                color: white;
                text-decoration: none;
                padding: 1rem 2rem;
                display: block;
                transition: background 0.3s;
            }
            nav a:hover { background: #34495e; }
            main { padding: 2rem; }
            section { 
                margin-bottom: 2rem;
                padding: 1.5rem;
                background: #fafafa;
                border-radius: 8px;
                border: 1px solid #e0e0e0;
            }
            h2 { 
                color: #2c3e50;
                margin-bottom: 1rem;
                padding-bottom: 0.5rem;
                border-bottom: 2px solid #667eea;
            }
            table { 
                width: 100%;
                border-collapse: collapse;
                margin: 1rem 0;
            }
            th, td { 
                padding: 0.75rem;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }
            th { 
                background: #667eea;
                color: white;
                font-weight: 600;
            }
            tr:hover { background: #f5f5f5; }
            .stat-grid { 
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
                margin: 1rem 0;
            }
            .stat-card { 
                background: white;
                padding: 1rem;
                border-radius: 5px;
                border: 1px solid #e0e0e0;
            }
            .stat-value { 
                font-size: 1.5rem;
                font-weight: bold;
                color: #667eea;
            }
            .stat-label { 
                color: #666;
                font-size: 0.9rem;
            }
            .error { 
                background: #fee;
                color: #c00;
                padding: 0.5rem;
                border-left: 4px solid #c00;
                margin: 0.5rem 0;
            }
            .warning { 
                background: #ffe;
                color: #a60;
                padding: 0.5rem;
                border-left: 4px solid #a60;
                margin: 0.5rem 0;
            }
            .plot-grid { 
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
                gap: 1rem;
                margin: 1rem 0;
            }
            .plot-container { 
                background: white;
                padding: 1rem;
                border-radius: 5px;
                border: 1px solid #e0e0e0;
            }
            .plot-container img { 
                width: 100%;
                height: auto;
            }
            footer { 
                background: #2c3e50;
                color: white;
                text-align: center;
                padding: 1rem;
            }
        """
    
    def _generate_parameters_section(self, data: Dict) -> str:
        """Generiert Parameter-Sektion"""
        params = data.get('parameters', {})
        
        html = """
        <section id="parameters">
            <h2>Processing Parameters</h2>
            <table>
                <tr>
                    <th>Parameter</th>
                    <th>Value</th>
                    <th>Description</th>
                </tr>
        """
        
        param_descriptions = {
            'normal_scale': 'Radius for normal estimation',
            'search_scale': 'Search radius for M3C2',
            'max_depth': 'Maximum search depth',
            'outlier_method': 'Outlier detection method',
            'outlier_multiplier': 'Outlier threshold multiplier'
        }
        
        for key, value in params.items():
            desc = param_descriptions.get(key, '')
            html += f"""
                <tr>
                    <td>{key}</td>
                    <td>{value}</td>
                    <td>{desc}</td>
                </tr>
            """
        
        html += """
            </table>
        </section>
        """
        
        return html
    
    def _generate_statistics_section(self, data: Dict) -> str:
        """Generiert Statistik-Sektion"""
        stats = data.get('statistics', {})
        
        if not stats:
            return '<section id="statistics"><h2>Statistics</h2><p>No statistics available</p></section>'
        
        html = """
        <section id="statistics">
            <h2>Statistical Analysis</h2>
            <div class="stat-grid">
        """
        
        # Key metrics
        metrics = [
            ('Mean Distance', stats.get('inliers_only', {}).get('mean', 0), 'm'),
            ('Std Deviation', stats.get('inliers_only', {}).get('std', 0), 'm'),
            ('RMSE', stats.get('inliers_only', {}).get('rmse', 0), 'm'),
            ('Outliers', stats.get('outlier_percentage', 0), '%'),
            ('Total Points', stats.get('total_count', 0), ''),
            ('Inliers', stats.get('inliers_only', {}).get('count', 0), '')
        ]
        
        for label, value, unit in metrics:
            html += f"""
                <div class="stat-card">
                    <div class="stat-label">{label}</div>
                    <div class="stat-value">{value:.4f if isinstance(value, float) else value}{unit}</div>
                </div>
            """
        
        html += """
            </div>
        </section>
        """
        
        return html
    
    def _generate_visualizations_section(self, data: Dict) -> str:
        """Generiert Visualisierungs-Sektion"""
        plots = data.get('plots', {})
        
        if not plots:
            return '<section id="visualizations"><h2>Visualizations</h2><p>No visualizations available</p></section>'
        
        html = """
        <section id="visualizations">
            <h2>Visualizations</h2>
            <div class="plot-grid">
        """
        
        for plot_type, plot_path in plots.items():
            if plot_path and Path(plot_path).exists():
                # Convert to relative path for HTML
                rel_path = Path(plot_path).name
                html += f"""
                    <div class="plot-container">
                        <h3>{plot_type.replace('_', ' ').title()}</h3>
                        <img src="{rel_path}" alt="{plot_type}">
                    </div>
                """
        
        html += """
            </div>
        </section>
        """
        
        return html
    
    def _generate_errors_section(self, data: Dict) -> str:
        """Generiert Fehler-Sektion"""
        errors = data.get('errors', [])
        
        if not errors:
            return '<section id="errors"><h2>Errors & Warnings</h2><p>No errors or warnings</p></section>'
        
        html = """
        <section id="errors">
            <h2>Errors & Warnings</h2>
        """
        
        for error in errors:
            if 'error' in error.lower():
                html += f'<div class="error">{error}</div>'
            else:
                html += f'<div class="warning">{error}</div>'
        
        html += """
        </section>
        """
        
        return html